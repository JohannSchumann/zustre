-- CoCoSpec --
contract top (x:bool) returns (OK:bool);
 var time:int; b:bool; a:bool; 
 let
   -- INITIAL STATES Contract
   ensure 
	OK and  time <= 0 and  not a and  time >= 0 and  not b;

    -- TRANSITION RELATION Contract
    ensure 
	(not OK => pre(a) or  pre(time) >= 1) and 
	time + -1*pre(time) <= 1 and 
	(not (pre(time) >= 3) => pre(time) + -1*time <= -1) and 
	(not pre(b) => a) and 
	(b => pre(a)) and 
	(pre(a) =>
	 OK or  pre(b) or  pre(time) <= 0 or  pre(time) >= 2) and 
	(pre(a) => b) and 
	(pre(b) => OK or  pre(time) <= 1) and 
	(pre(b) => not a) and 
	(not (time >= 0) => pre(time) + -1*time <= -1) and 
	(not OK => pre(a) or  pre(time) <= 1) and 
	(not (pre(time) <= 3) => pre(time) + -1*time <= -1) and 
	(not (time <= 0) => pre(time) >= 4 or  pre(time) <= 2);
 tel
 
contract greycounter (x:bool) returns (out:bool);
 var b:bool; a:bool; 
 let
   -- INITIAL STATES Contract
   ensure 
	not out and  not b and  not a;

    -- TRANSITION RELATION Contract
    ensure 
	not a = pre(b) and 
	b = pre(a) and 
	not out = (not pre(a) or  not a);
 tel
 
contract intloopcounter (x:bool) returns (out:bool);
 var time:int; 
 let
   -- INITIAL STATES Contract
   ensure 
	not out and  time <= 0 and  time >= 0;

    -- TRANSITION RELATION Contract
    ensure 
	(out => pre(time) >= 1) and 
	time + -1*pre(time) <= 1 and 
	(not (pre(time) + -1*time <= -1) => pre(time) >= 3) and 
	(not out => pre(time) <= 0 or  pre(time) >= 2) and 
	(out => pre(time) <= 1) and 
	(not (pre(time) + -1*time <= -1) => pre(time) <= 3) and 
	(pre(time) <= 3 =>
	 not (pre(time) >= 3) or 
	 not (not (time <= 0) or  not (time >= 0)));
 tel
 
